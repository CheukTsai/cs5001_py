""" Created by Zhuocai Li
https://github.ccs.neu.edu/CS-5001-SEA-Spring2021/student-ZhuocaiLi """

Which functions you tested for Part 1
    Chess:
        draw_me:
            individually run in processing, with x = 100, y = 100, to see if it can draw a circle(100,100,90)
            the outcome is good.

    Board:
        draw_me:
            individually run in processing, change self.w and self.h to see if this function can draw board with
            different width and height
            the outcome is good.
    
    GameController:
        initialize:
            change self.w and self.h, to see if self.chesses can come out with different lists of lists,
            that are filled with None.
            valid input 1: self.w = 200, self.h = 300; self.chesses = [[None, None], [None, None]]
            valid input 2: self.w = 300, self.h = 400; self.chesses = [[None, None, None], [None, None, None], [None, None, None]]
            the outcome is good.

        chess_color:
            test both when self.player1 = True and self.player1 = False, to see if this function can return
            the correct color of each player.
            valid input 1: self.player1 = True; return color(255, 0, 0)
            valid input 2: self.player1 = False; return color(255, 255, 0)
            the outcome is good.            

        change_player:
            test both when self.player1 = True and self.player1 = False, to see if this function can make
            a switch of the boolean value of self.player1
            valid input 1: self.player1 = True; self.player1 = False
            valid input 2: self.player1 = False; self.player1 = True
            the outcome is good.

        check_release_spot:
            initialize a self.chesses first, with 1. full of None in it and 2. put some certain integers in
            it to stimulize that some of the spots on board are filled, to see whether the function can return
            corrcet release spot (the row number in that column)
            valid input 1: column = 0 self.chesses = [[None,1],[None,1]] ; return 0
            valid input 2: column = 1 self.chesses = [[1,1],[1,1]] ; return -1
            the outcome is good.

        check_game_end:
            initialize a self.chesses first, with 1. full of None in it and 2. put some certain integers in
            it but not make it full, to see whether the function can return the correct boolean value.
            valid input 1: self.chesses = [[None,1],[None,1]] ; return False
            valid input 2: self.chesses = [[1,1],[1,1]] ; return True
            the outcome is good.

        check_column_full:
            initialize a self.cheeses first, with 1. full of None in a certain column and 2. put some certain integers in
            it to stimulize that some of the spots on board are filled, return True if a column is full.
            valid input 1: self.chesses = [[None,1],[None,1]], column = 0; return False
            valid input 2: self.chesses = [[1,1],[None,1]], column = 0; return True
            the outcome is good.

        check_mouse_area:
            since mouseX and mouseY will change automatically, I print the return value of check_mouse_area,
            and see in the console of processing, if it prints True when the mouse is put in the legal area,
            and False if the mouse is put in illegal area.
            the outcome is good.

        game_over(print certain text if the game is over or a player wins)
            individually run in processing, to see if the function can show the text in the right way.
            the outcome is good.
